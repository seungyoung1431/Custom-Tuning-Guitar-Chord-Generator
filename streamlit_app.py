# streamlit_app.py
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from itertools import product
from scipy.signal import butter, lfilter

# --- Í∏∞Î≥∏ ÏÑ§Ï†ï ---
note_sequence = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']
note_to_index = {note: i for i, note in enumerate(note_sequence)}

def note_from_fret(open_note, fret):
    start = note_to_index[open_note]
    return note_sequence[(start + fret) % 12]

def get_frequency(note, octave=4):
    base_freq = 440.0  # A4
    semitone_distance = note_to_index[note] - note_to_index['A'] + (octave - 4) * 12
    return base_freq * (2 ** (semitone_distance / 12))

# --- Streamlit UI ---
st.title("üé∏Custom Tuning Guitar Chord Generator")
st.caption("Create Chord Voicings for Any Tuning")

st.subheader("1. Set Your Tuning (6th to 1st string)")
tuning = []
open_frequencies = []
tuning_columns = st.columns(6)
def_octaves = [2, 2, 3, 3, 3, 4]  # E2 A2 D3 G3 B3 E4
default_notes = ['E', 'A', 'D', 'G', 'B', 'E']
for i in range(6):
    note = tuning_columns[i].selectbox(f"{6 - i} string", note_sequence, index=note_sequence.index(default_notes[i]))
    tuning.append(note)
    open_frequencies.append(get_frequency(note, def_octaves[i]))

allowed_mute_indices = {0, 1, 5}  # 6Î≤à, 5Î≤à, 1Î≤à Ï§ÑÎßå ÏùåÏÜåÍ±∞ Í∞ÄÎä•

chord_root = st.selectbox("Chord Root", note_sequence)
chord_type = st.selectbox("Chord Type", list({
    "maj": [0, 4, 7],
    "add2": [0, 2, 4, 7],
    "add#4" : [0, 4, 6, 7],
    "sus2": [0, 2, 7],
    "sus4": [0, 5, 7],
    "add6": [0, 4, 7, 9],
    "dim": [0, 3, 6],
    "dim7": [0, 3, 6, 9],
    "aug": [0, 4, 8],
    "maj7": [0, 4, 7, 11],
    "maj9": [0, 4, 7, 11, 14],
    "maj#11": [0, 4, 7, 11, 18],
    "maj9,#11": [0, 4, 7, 11, 14, 18],
    "maj13": [0, 4, 7, 11, 21],
    "maj9,13": [0, 4, 7, 11, 14, 21],
    "maj#11,13": [0, 4, 7, 11, 18, 21],
    "maj9,#11,13": [0, 4, 7, 11, 14, 18, 21],                
    "min": [0, 3, 7],
    "min7": [0, 3, 7, 10],
    "min_maj7": [0, 3, 7, 11],
    "min9": [0, 3, 7, 10, 14],
    "min11": [0, 3, 7, 10, 17],
    "min9,11": [0, 3, 7, 10, 14, 17],
    "min13": [0, 3, 7, 10, 21],
    "min9,13": [0, 3, 7, 10, 14, 21],
    "min11,13": [0, 3, 7, 10, 17, 21],
    "min9,11,13 :": [0, 3, 7, 10, 14, 17, 21],
    "7": [0, 4, 7, 10],
    "7,b9": [0, 4, 7, 10, 13],
    "7,9": [0, 4, 7, 10, 14],
    "7,#9": [0, 4, 7, 10, 15],
    "7,b9,#9": [0, 4, 7, 10, 13, 15],
    "7,#11": [0, 4, 7, 10, 18],
    "7,b9,#11": [0, 4, 7, 10, 13, 18],
    "7,9,#11" :[0, 4, 7, 10, 14, 18], 
    "7,#9,#11": [0, 4, 7, 10, 15, 18],
    "7,b13": [0, 4, 7, 10, 20],
    "7,b9,b13" : [0, 4, 7, 10, 13, 20],
    "7,9,b13": [0, 4, 7, 10, 14, 20],
    "7,#9,b13": [0, 4, 7, 10, 15, 20],
    "7,#11,b13": [0, 4, 7, 10, 18, 20],
    "7,9,#11,b13": [0, 4, 7, 10, 14, 18, 20],
    "7,13": [0, 4, 7, 10, 21],
    "7,b9,13": [0, 4, 7, 10, 13, 21],
    "7,9,13": [0, 4, 7, 10, 14, 21],
    "7,#9,13": [0, 4, 7, 10, 15, 21],
    "7,#11,13": [0, 4, 7, 10, 18, 21],
    "7,9,#11,13": [0, 4, 7, 10, 14, 18, 21],
    "7,b9,#11,13": [0, 4, 7, 10, 13, 18, 21],
    "7,#9,#11,13": [0, 4, 7, 10, 15, 18, 21],
    "sus4,7": [0, 5, 7, 10],
    "sus4,7,b9": [0, 5, 7, 10, 13],
    "sus4,7,b9,13": [0, 5, 7, 10, 13, 21],
    "sus4,7,b9,b13": [0, 5, 7, 10, 13, 20],
    "sus4,7,9": [0, 5, 7, 10, 14],
    "sus4,7,9,13": [0, 5, 7, 10, 14, 21],
    "sus4,7,9,b13": [0, 5, 7, 10, 14, 20]
}.keys()))
mode = st.radio("Display Mode", ["Show all voicings", "Show best voicing only"])

# --- ÏΩîÎìú Ìèº ---
chord_formulas = {
    "maj": [0, 4, 7],
    "add2": [0, 2, 4, 7],
    "add#4" : [0, 4, 6, 7],
    "sus2": [0, 2, 7],
    "sus4": [0, 5, 7],
    "add6": [0, 4, 7, 9],
    "dim": [0, 3, 6],
    "dim7": [0, 3, 6, 9],
    "aug": [0, 4, 8],
    "maj7": [0, 4, 7, 11],
    "maj9": [0, 4, 7, 11, 14],
    "maj#11": [0, 4, 7, 11, 18],
    "maj9,#11": [0, 4, 7, 11, 14, 18],
    "maj13": [0, 4, 7, 11, 21],
    "maj9,13": [0, 4, 7, 11, 14, 21],
    "maj#11,13": [0, 4, 7, 11, 18, 21],
    "maj9,#11,13": [0, 4, 7, 11, 14, 18, 21],                
    "min": [0, 3, 7],
    "min7": [0, 3, 7, 10],
    "min_maj7": [0, 3, 7, 11],
    "min9": [0, 3, 7, 10, 14],
    "min11": [0, 3, 7, 10, 17],
    "min9,11": [0, 3, 7, 10, 14, 17],
    "min13": [0, 3, 7, 10, 21],
    "min9,13": [0, 3, 7, 10, 14, 21],
    "min11,13": [0, 3, 7, 10, 17, 21],
    "min9,11,13 :": [0, 3, 7, 10, 14, 17, 21],
    "7": [0, 4, 7, 10],
    "7,b9": [0, 4, 7, 10, 13],
    "7,9": [0, 4, 7, 10, 14],
    "7,#9": [0, 4, 7, 10, 15],
    "7,b9,#9": [0, 4, 7, 10, 13, 15],
    "7,#11": [0, 4, 7, 10, 18],
    "7,b9,#11": [0, 4, 7, 10, 13, 18],
    "7,9,#11" :[0, 4, 7, 10, 14, 18], 
    "7,#9,#11": [0, 4, 7, 10, 15, 18],
    "7,b13": [0, 4, 7, 10, 20],
    "7,b9,b13" : [0, 4, 7, 10, 13, 20],
    "7,9,b13": [0, 4, 7, 10, 14, 20],
    "7,#9,b13": [0, 4, 7, 10, 15, 20],
    "7,#11,b13": [0, 4, 7, 10, 18, 20],
    "7,9,#11,b13": [0, 4, 7, 10, 14, 18, 20],
    "7,13": [0, 4, 7, 10, 21],
    "7,b9,13": [0, 4, 7, 10, 13, 21],
    "7,9,13": [0, 4, 7, 10, 14, 21],
    "7,#9,13": [0, 4, 7, 10, 15, 21],
    "7,#11,13": [0, 4, 7, 10, 18, 21],
    "7,9,#11,13": [0, 4, 7, 10, 14, 18, 21],
    "7,b9,#11,13": [0, 4, 7, 10, 13, 18, 21],
    "7,#9,#11,13": [0, 4, 7, 10, 15, 18, 21],
    "sus4,7": [0, 5, 7, 10],
    "sus4,7,b9": [0, 5, 7, 10, 13],
    "sus4,7,b9,13": [0, 5, 7, 10, 13, 21],
    "sus4,7,b9,b13": [0, 5, 7, 10, 13, 20],
    "sus4,7,9": [0, 5, 7, 10, 14],
    "sus4,7,9,13": [0, 5, 7, 10, 14, 21],
    "sus4,7,9,b13": [0, 5, 7, 10, 14, 20]
}
guide_tone_intervals = {
    "maj": [0, 4, 7],
    "add2": [0, 2, 7],
    "add#4" : [0, 6, 7],
    "sus2": [0, 2, 7],
    "sus4": [0, 5, 7],
    "add6": [0, 4, 9],
    "dim": [0, 3, 6],
    "dim7": [0, 3, 6, 9],
    "aug": [0, 4, 8],
    "maj7": [0, 4, 11],
    "maj9": [0, 4, 11, 14],
    "maj#11": [0, 4, 11, 18],
    "maj9,#11": [0, 11, 14, 18],
    "maj13": [0, 4, 11, 21],
    "maj9,13": [0, 11, 14, 21],
    "maj#11,13": [0, 11, 18, 21],
    "maj9,#11,13": [0, 11, 14, 18, 21],                
    "min": [0, 3, 7],
    "min7": [0, 3, 10],
    "min_maj7": [0, 3, 7, 11],
    "min9": [0, 3, 10, 14],
    "min11": [0, 3, 10, 17],
    "min9,11": [0, 10, 14, 17],
    "min13": [0, 3, 10, 21],
    "min9,13": [0, 10, 14, 21],
    "min11,13": [0, 10, 17, 21],
    "min9,11,13 :": [0, 10, 14, 17, 21],
    "7": [0, 4, 7, 10],
    "7,b9": [0, 4, 10, 13],
    "7,9": [0, 4, 10, 14],
    "7,#9": [0, 4, 10, 15],
    "7,b9,#9": [0, 10, 13, 15],
    "7,#11": [0, 4, 10, 18],
    "7,b9,#11": [0, 10, 13, 18],
    "7,9,#11" :[0, 10, 14, 18], 
    "7,#9,#11": [0, 10, 15, 18],
    "7,b13": [0, 4, 10, 20],
    "7,b9,b13" : [0, 10, 13, 20],
    "7,9,b13": [0, 10, 14, 20],
    "7,#9,b13": [0, 10, 15, 20],
    "7,#11,b13": [0, 10, 18, 20],
    "7,9,#11,b13": [0, 10, 14, 18, 20],
    "7,13": [0, 4, 10, 21],
    "7,b9,13": [0, 10, 13, 21],
    "7,9,13": [0, 10, 14, 21],
    "7,#9,13": [0, 10, 15, 21],
    "7,#11,13": [0, 10, 18, 21],
    "7,9,#11,13": [0, 10, 14, 18, 21],
    "7,b9,#11,13": [0, 10, 13, 18, 21],
    "7,#9,#11,13": [0, 10, 15, 18, 21],
    "sus4,7": [0, 5, 7, 10],
    "sus4,7,b9": [0, 5, 10, 13],
    "sus4,7,b9,13": [0, 5, 10, 13, 21],
    "sus4,7,b9,b13": [0, 5, 10, 13, 20],
    "sus4,7,9": [0, 5, 10, 14],
    "sus4,7,9,13": [0, 5, 10, 14, 21],
    "sus4,7,9,b13": [0, 5, 10, 14, 20],
}

def get_full_chord_tones(chord_root, chord_type):
    intervals = chord_formulas[chord_type]
    root_index = note_to_index[chord_root]
    return {note_sequence[(root_index + iv) % 12] for iv in intervals}

def get_guide_tones(chord_root, chord_type):
    intervals = guide_tone_intervals[chord_type]
    root_index = note_to_index[chord_root]
    return {note_sequence[(root_index + iv) % 12] for iv in intervals}

def generate_voicings(chord_root, chord_type, max_fret=14, allow_muted=True):
    full_chord = get_full_chord_tones(chord_root, chord_type)
    required_tones = get_guide_tones(chord_root, chord_type)
    possible_options = []
    for idx, open_note in enumerate(tuning):
        opts = [(fret, note_from_fret(open_note, fret)) for fret in range(max_fret+1)
                if note_from_fret(open_note, fret) in full_chord]
        if allow_muted and idx in allowed_mute_indices:
            opts.append(("x", None))
        possible_options.append(opts)
    valid_voicings = []
    for comb in product(*possible_options):
        played = [c for c in comb if c[0] != "x"]
        if len(played) < 4: continue
        produced = {c[1] for c in played}
        if not required_tones.issubset(produced): continue
        frets = [c[0] for c in played if isinstance(c[0], int)]
        span = max(frets) - min(frets)
        if span > 3: continue
        lower_indices = [i for i in [0,1,2] if comb[i][0] != "x"]
        if not lower_indices: continue
        if comb[min(lower_indices)][1] != chord_root: continue
        frets_sum = sum(f for f, _ in played if isinstance(f, int))
        valid_voicings.append((comb, span, min(lower_indices), frets_sum))
    valid_voicings.sort(key=lambda x: (x[2], x[1], x[3]))
    return valid_voicings

def print_voicing(voicing):
    result = []
    for i, opt in enumerate(voicing):
        string_label = f"{6-i} ({tuning[i]})"
        fret, note = opt
        result.append(f"{string_label}: {'x' if fret == 'x' else f'{fret} ‚Üí {note}' }")
    return "\n".join(result)

def bandpass_filter(data, rate, low, high):
    nyq = 0.5 * rate
    b, a = butter(4, [low/nyq, high/nyq], btype='band')
    return lfilter(b, a, data)

def envelope(duration, rate, attack_ms, release_ms):
    samples = int(duration * rate)
    a, r = int(attack_ms / 1000 * rate), int(release_ms / 1000 * rate)
    s = samples - a - r
    return np.concatenate([
        np.linspace(0, 1, a),
        np.ones(s),
        np.linspace(1, 0, r)
    ]) if s > 0 else np.concatenate([np.linspace(0, 1, a), np.linspace(1, 0, r)])

def synthesize_voicing(voicing, sample_rate=44100):
    duration = 1.0
    delay = 0.12
    total = duration + delay * 5
    samples = int(total * sample_rate)
    audio = np.zeros(samples)
    for i, (fret, _) in enumerate(voicing):
        if fret == "x": continue
        freq = open_frequencies[i] * (2 ** (fret / 12))
        offset = int(delay * i * sample_rate)
        t = np.linspace(0, duration, int(sample_rate * duration), False)
        env = envelope(duration, sample_rate, 60, 500)
        wave = 0.2 * np.sin(2 * np.pi * freq * t) * env
        audio[offset:offset+len(wave)] += wave[:samples-offset]
    audio = bandpass_filter(audio, sample_rate, 80, 5000)
    audio /= np.max(np.abs(audio)) if np.max(np.abs(audio)) > 0 else 1
    return audio

# --- Ï∂îÍ∞Ä: Í∏∞ÌÉÄ ÏΩîÎìú Îã§Ïù¥Ïñ¥Í∑∏Îû® Í∑∏Î¶¨Í∏∞ ---
def draw_chord_diagram(voicing, chord_root, tuning):
    """
    voicing: Í∞Å Ï§Ñ(6~1Î≤à)Ïóê ÎåÄÌïú (fret, note) ÌäúÌîåÎ°ú Íµ¨ÏÑ±Îêú 6ÏöîÏÜå ÌäúÌîå.
    chord_root: ÏÑ†ÌÉùÎêú ÏΩîÎìú Î£®Ìä∏ (Ïòà, "C")
    tuning: Í∞Å Ï§ÑÏùò Ïò§Ìîà Ïùå (Ïòà, ['E','A','D','G','B','E'])
    
    - ÎÆ§Ìä∏("x")ÏôÄ Ïò§Ìîà(0)ÏùÄ Nut ÏúÑÏóê "X" ÎòêÎäî "O"Î°ú ÌëúÏãú
    - frettedÎêú Í≤ΩÏö∞, Ìï¥Îãπ fretsÏóê ÏõêÏùÑ Í∑∏Î¶¨Î©∞, Î£®Ìä∏ ÏùåÏù¥Î©¥ Í≤ÄÏùÄÏÉâÏúºÎ°ú Ï±ÑÏõÄ
    - ÏµúÏÜå fretted fretÏù¥ 0 ÎòêÎäî 1Ïù¥Î©¥ Nut(ÍµµÏùÄ ÏÑ†)Î•º Í∑∏Î¶¨Í≥†, 2Ïù¥ÏÉÅÏù¥Î©¥ Îã§Ïù¥Ïñ¥Í∑∏Îû® ÏôºÏ™ΩÏóê ÏãúÏûë ÌîÑÎ†õ Î≤àÌò∏Î•º ÌëúÏãú
    """
    # Í∞Å Ïä§Ìä∏ÎßÅÏùò ÌëúÏãú Ï†ïÎ≥¥Î•º Íµ¨ÏÑ± (index 0: 6Î≤à, index 5: 1Î≤à)
    positions = []
    finger_frets = []
    for i, (fret, note) in enumerate(voicing):
        if fret == "x":
            positions.append({"type": "mute"})
        elif fret == 0:
            positions.append({"type": "open"})
        else:
            positions.append({"type": "finger", "fret": fret, "note": note})
            finger_frets.append(fret)
    
    if finger_frets:
        min_fret = min(finger_frets)
    else:
        min_fret = 1  # Ïò§Ìîà ÏΩîÎìúÏù∏ Í≤ΩÏö∞

    # nut (Ïò§Ìîà ÏΩîÎìúÏùò Í≤ΩÏö∞) Ïó¨Î∂Ä Í≤∞Ï†ï
    nut = (min_fret <= 1)
    n_rows = 5  # Îã§Ïù¥Ïñ¥Í∑∏Îû®Ïóê ÌëúÏãúÌï† frets Ïàò
    fig, ax = plt.subplots(figsize=(3, 4))
    
    # ÏÑ∏Î°úÏ§Ñ (Ïä§Ìä∏ÎßÅ) Í∑∏Î¶¨Í∏∞: ÏôºÏ™ΩÎ∂ÄÌÑ∞ 6Î≤à ~ 1Î≤àÍπåÏßÄ (Ïù∏Îç±Ïä§ 0~5)
    for i in range(6):
        ax.plot([i, i], [0, n_rows], color='black', linewidth=1)
    
    # Í∞ÄÎ°úÏ§Ñ (frets) Í∑∏Î¶¨Í∏∞
    for j in range(n_rows + 1):
        # NutÏù∏ Í≤ΩÏö∞, Ï†úÏùº ÏúÑÏùò Ï§ÑÏùÑ ÍµµÍ≤å ÌëúÏãú
        if j == 0 and nut:
            ax.plot([-0.1, 5.1], [j, j], color='black', linewidth=3)
        else:
            ax.plot([-0.1, 5.1], [j, j], color='black', linewidth=1)
    
    # Í∞Å Ïä§Ìä∏ÎßÅÏùò Ïò§Ìîà/ÎÆ§Ìä∏, ÌòπÏùÄ frettedÎêú ÎßàÏª§ Í∑∏Î¶¨Í∏∞
    # Ïò§Ìîà/ÎÆ§Ìä∏ ÌëúÏãúÎäî Nut ÏúÑÏ™Ω (y = -0.3) Ïóê Î∞∞Ïπò
    for i, pos in enumerate(positions):
        x = i  # ÏôºÏ™ΩÎ∂ÄÌÑ∞ 0~5
        if pos["type"] == "mute":
            ax.text(x, -0.3, "X", ha='center', va='center', fontsize=12)
        elif pos["type"] == "open":
            ax.text(x, -0.3, "O", ha='center', va='center', fontsize=12)
        elif pos["type"] == "finger":
            fret = pos["fret"]
            # frettedÎêú ÏúÑÏπòÏùò y Ï¢åÌëú Í≥ÑÏÇ∞: 
            # - NutÍ∞Ä Í∑∏Î†§ÏßÄÎäî Í≤ΩÏö∞ (min_fret <=1): Ï≤´ fret ÏÖÄÏùò Ï§ëÏïôÏùÄ 0.5, Ï¶â (fret - 1) + 0.5
            # - NutÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞: ÏÉÅÎã®Ïù¥ min_fretÏóê Ìï¥ÎãπÌïòÎØÄÎ°ú (fret - min_fret) + 0.5
            if nut:
                y = (fret - 1) + 0.5
            else:
                y = (fret - min_fret) + 0.5
            # ÏΩîÎìú Î£®Ìä∏Ïù∏ Í≤ΩÏö∞ ÏõêÏùÑ Ï±ÑÏö¥ Í≤ÄÏùÄÏÉâÏúºÎ°ú, ÏïÑÎãê Í≤ΩÏö∞ Ìù∞ÏÉâ ÎÇ¥Î∂ÄÏóê Í≤ÄÏùÄ ÌÖåÎëêÎ¶¨Î°ú ÌëúÏãú
            if pos["note"] == chord_root:
                circle = plt.Circle((x, y), 0.3, color='black', zorder=10)
            else:
                circle = plt.Circle((x, y), 0.3, facecolor='white', edgecolor='black', zorder=10)
            ax.add_patch(circle)
    
    # ÎßåÏïΩ NutÎ•º Í∑∏Î¶¨ÏßÄ ÏïäÎäî Í≤ΩÏö∞ (Ï¶â, ÏµúÏÜå fretted fretÏù¥ 2 Ïù¥ÏÉÅÏù¥Î©¥) ÏãúÏûë ÌîÑÎ†õ Î≤àÌò∏Î•º Îã§Ïù¥Ïñ¥Í∑∏Îû® ÏôºÏ™ΩÏóê ÌëúÏãú.
    if not nut:
        ax.text(-0.7, 0.5, str(min_fret), ha='center', va='center', fontsize=12)
    
    # Ï¢åÌëú ÏÑ§Ï†ï: ÏùºÎ∞òÏ†ÅÏúºÎ°ú Í∏∞ÌÉÄ Îã§Ïù¥Ïñ¥Í∑∏Îû®ÏùÄ ÏúÑÏ™ΩÏù¥ NutÏù¥ÎØÄÎ°ú yÏ∂ïÏùÑ Î∞òÏ†Ñ
    ax.set_xlim(-1, 6)
    ax.set_ylim(n_rows, -1)
    ax.axis('off')
    
    return fig

# --- Ïã§Ìñâ ---
if st.button("Generate Voicings"):
    voicings = generate_voicings(chord_root, chord_type)
    st.write(f"Number of Voicings: {len(voicings)}")
    st.write(f"Chord: {chord_root}{chord_type}")
    if not voicings:
        st.warning("No matching voicings were found.")
    elif mode == "Show best voicing only":
        best_voicing, *_ = voicings[0]
        st.subheader("Best Voicing")
        st.text(print_voicing(best_voicing))
        # Í∏∞ÌÉÄ Îã§Ïù¥Ïñ¥Í∑∏Îû® Ï∂úÎ†•
        fig = draw_chord_diagram(best_voicing, chord_root, tuning)
        st.pyplot(fig)
        st.audio(synthesize_voicing(best_voicing), sample_rate=44100)
    else:
        for idx, (v, *_rest) in enumerate(voicings, 1):
            st.subheader(f"Voicing {idx}")
            st.text(print_voicing(v))
            # Í∞Å Î≥¥Ïù¥Ïã±Ïóê ÎåÄÌï¥ Í∏∞ÌÉÄ Îã§Ïù¥Ïñ¥Í∑∏Îû® ÌëúÏãú
            fig = draw_chord_diagram(v, chord_root, tuning)
            st.pyplot(fig)
            st.audio(synthesize_voicing(v), sample_rate=44100)
